import asyncio
import logging
import os
import re
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

from openai_client import OpenAIClient
from document_generator import DocumentGenerator

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env')

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
openai_client = OpenAIClient()
doc_generator = DocumentGenerator()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def create_mode_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="ü§ù –ú–∏—Å—Å–∏—Å –•–æ—É–ø (–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä)", callback_data="mode_hope")
        ],
        [
            InlineKeyboardButton(text="üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ (–¥–ª—è —É—Ä–æ–≤–Ω—è A1)", callback_data="mode_teacher")
        ]
    ])
    return keyboard

def create_language_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_russian")
        ],
        [
            InlineKeyboardButton(text="üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data="lang_english")
        ]
    ])
    return keyboard

def create_interview_type_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí¨ Soft Skills (–º—è–≥–∫–∏–µ –Ω–∞–≤—ã–∫–∏)", callback_data="type_soft")
        ],
        [
            InlineKeyboardButton(text="üíª Hard Skills (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏)", callback_data="type_hard")
        ],
        [
            InlineKeyboardButton(text="üìã Experience (–æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã)", callback_data="type_experience")
        ]
    ])
    return keyboard

async def set_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ"),
        BotCommand(command="stop", description="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ"),
        BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞")
    ]
    await bot.set_my_commands(commands)

class UserState:
    def __init__(self, user_id):
        self.user_id = user_id
        self.conversation_history = []
        self.is_interview_active = False
        self.prompt = None
        self.interview_mode = None  # "hope" –∏–ª–∏ "teacher"
        self.language = None  # "russian" –∏–ª–∏ "english"
        self.interview_type = None  # "soft", "hard", "experience"
        self.name = None
        self.is_setup_complete = False
    
    def add_message(self, text, is_bot=False):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"""
        self.conversation_history.append({
            "text": text,
            "is_bot": is_bot,
            "timestamp": datetime.now()
        })
    
    def get_conversation_history(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è OpenAI API"""
        return self.conversation_history
    
    def filter_technical_info(self, response):
        """–£–±–∏—Ä–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –≤ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö –¥–ª—è Telegram
        filtered_response = re.sub(r'\{[^}]*\}', '', response)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        lines = filtered_response.split('\n')
        filtered_lines = []
        
        for line in lines:
            line = line.strip()
            if line:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                filtered_lines.append(line)
        
        return '\n'.join(filtered_lines).strip()



@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_states:
        user_states[user_id] = UserState(user_id)
    
    user_state = user_states[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (user_state.interview_mode and user_state.language and 
        user_state.interview_type and user_state.name and 
        user_state.is_setup_complete and not user_state.is_interview_active):
        # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω—ã, –Ω–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        user_state.is_interview_active = True
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ë–æ—Ç –¥—É–º–∞–µ—Ç..."
        thinking_message = await message.answer("ü§î –ë–æ—Ç –¥—É–º–∞–µ—Ç...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI
        try:
            first_message = await openai_client.get_response(
                user_state.prompt,
                f"–ù–∞—á–∞–ª–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è —Å {user_state.name}",
                [],
                user_state.interview_mode,
                user_state.language,
                user_state.name,
                user_state.interview_type
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ë–æ—Ç –¥—É–º–∞–µ—Ç..."
            await thinking_message.delete()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é (–¥–ª—è DOCX)
            user_state.add_message(first_message, is_bot=True)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            filtered_first_message = user_state.filter_technical_info(first_message)
            await message.answer(filtered_first_message)
            
        except Exception as e:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ë–æ—Ç –¥—É–º–∞–µ—Ç..." –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            await thinking_message.delete()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.")
        return
    
    # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –∏–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_state.is_interview_active = False
    user_state.is_setup_complete = False
    user_state.interview_mode = None
    user_state.language = None
    user_state.interview_type = None
    user_state.name = None
    user_state.conversation_history = []
    
    # –ü—Ä–æ–º—Ç –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
    # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º None - –∑–∞–≥—Ä—É–∑–∏–º –ø–æ–∑–∂–µ
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
    welcome_text = """ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π!

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:

ü§ù **–ú–∏—Å—Å–∏—Å –•–æ—É–ø** - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É
‚Ä¢ –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞
‚Ä¢ –ü–æ–º–æ—â—å —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º —Å–ª–æ–≤

üë®‚Äçüè´ **–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ** - –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É—Ä–æ–≤–Ω—è A1
‚Ä¢ –¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –ª–µ–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:"""
    
    await message.answer(welcome_text, reply_markup=create_mode_keyboard())

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
/stop - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìã **–í–æ –≤—Ä–µ–º—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ:**
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞
‚Ä¢ –ó–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ü—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /stop –∏–ª–∏ –Ω–∞–ø–∏—Å–∞–≤ "—Å—Ç–æ–ø"

üìÑ **–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ DOCX**"""
    
    await message.answer(help_text)

@dp.message(Command("stop"))
async def cmd_stop(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"""
    user_id = message.from_user.id
    
    if user_id not in user_states or not user_states[user_id].is_interview_active:
        await message.answer("–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return
    
    user_state = user_states[user_id]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await message.answer("–ó–∞–≤–µ—Ä—à–∞—é —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
    await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç...")
    
    try:
        analytics_report = await openai_client.generate_analytics_report(
            user_state.get_conversation_history()
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc_generator.generate_report(
            user_id, 
            user_state.get_conversation_history(), 
            analytics_report
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc_path = doc_generator.save_document(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(doc_path, 'rb') as doc_file:
            await message.answer_document(
                types.BufferedInputFile(
                    doc_file.read(),
                    filename=f"interview_report_{user_id}.docx"
                ),
                caption="–í–∞—à –æ—Ç—á–µ—Ç –ø–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –≥–æ—Ç–æ–≤!"
            )
        
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
        user_state.is_interview_active = False
        user_state.is_setup_complete = False
        user_state.interview_mode = None
        user_state.language = None
        user_state.interview_type = None
        user_state.name = None
        user_state.conversation_history = []
        user_state.prompt = None
        
        await message.answer("–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ /start")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.")


@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
    user_id = callback.from_user.id
    
    if user_id not in user_states:
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return
    
    user_state = user_states[user_id]
    
    if callback.data == "mode_hope":
        user_state.interview_mode = "hope"
        await callback.message.edit_text(
            "ü§ù –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: –ú–∏—Å—Å–∏—Å –•–æ—É–ø\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:",
            reply_markup=create_language_keyboard()
        )
        await callback.answer()
        
    elif callback.data == "mode_teacher":
        user_state.interview_mode = "teacher"
        user_state.language = "english"  # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        await callback.message.edit_text(
            "üë®‚Äçüè´ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ\n\n"
            "–Ø–∑—ã–∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:",
            reply_markup=create_interview_type_keyboard()
        )
        await callback.answer()
        
    elif callback.data == "lang_russian":
        user_state.language = "russian"
        await callback.message.edit_text(
            "üá∑üá∫ –í—ã–±—Ä–∞–Ω —è–∑—ã–∫: –†—É—Å—Å–∫–∏–π\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:",
            reply_markup=create_interview_type_keyboard()
        )
        await callback.answer()
        
    elif callback.data == "lang_english":
        user_state.language = "english"
        await callback.message.edit_text(
            "üá¨üáß –í—ã–±—Ä–∞–Ω —è–∑—ã–∫: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:",
            reply_markup=create_interview_type_keyboard()
        )
        await callback.answer()
        
    elif callback.data == "type_soft":
        user_state.interview_type = "soft"
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è Soft Skills
        try:
            user_state.prompt = await openai_client.load_prompt("–ü—Ä–æ–º—Ç Soft Skills –Ω–µ–π—Ä–æ-—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π.txt")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º—Ç–∞ Soft Skills: {e}")
            user_state.prompt = await openai_client.load_prompt("prompt.txt")  # Fallback
        
        await callback.message.edit_text(
            "üí¨ –í—ã–±—Ä–∞–Ω —Ç–∏–ø: Soft Skills (–º—è–≥–∫–∏–µ –Ω–∞–≤—ã–∫–∏)\n\n"
            "–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è)"
        )
        await callback.answer()
        
    elif callback.data == "type_hard":
        user_state.interview_type = "hard"
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è Hard Skills
        try:
            user_state.prompt = await openai_client.load_prompt("–ü—Ä–æ–º—Ç Hard Skills –Ω–µ–π—Ä–æ-—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π.txt")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º—Ç–∞ Hard Skills: {e}")
            user_state.prompt = await openai_client.load_prompt("prompt.txt")  # Fallback
        
        await callback.message.edit_text(
            "üíª –í—ã–±—Ä–∞–Ω —Ç–∏–ø: Hard Skills (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏)\n\n"
            "–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è)"
        )
        await callback.answer()
        
    elif callback.data == "type_experience":
        user_state.interview_type = "experience"
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è Experience
        try:
            user_state.prompt = await openai_client.load_prompt("prompt.txt")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º—Ç–∞ Experience: {e}")
            user_state.prompt = await openai_client.load_prompt("prompt.txt")  # Fallback
        
        await callback.message.edit_text(
            "üìã –í—ã–±—Ä–∞–Ω —Ç–∏–ø: Experience (–æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã)\n\n"
            "–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è)"
        )
        await callback.answer()


@dp.message()
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    user_text = message.text.strip().lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
    if user_id not in user_states:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    user_state = user_states[user_id]
    
    # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∏–º–µ–Ω–∏
    if not user_state.is_setup_complete and user_state.interview_type and user_state.interview_mode and user_state.language:
        user_state.name = message.text.strip()
        user_state.is_setup_complete = True
        user_state.is_interview_active = True
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI
        try:
            first_message = await openai_client.get_response(
                user_state.prompt,
                f"–ù–∞—á–∞–ª–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è —Å {user_state.name}",
                [],
                user_state.interview_mode,
                user_state.language,
                user_state.name,
                user_state.interview_type
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é (–¥–ª—è DOCX)
            user_state.add_message(first_message, is_bot=True)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            filtered_first_message = user_state.filter_technical_info(first_message)
            await message.answer(filtered_first_message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
    if not user_state.is_interview_active:
        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
        if user_state.is_setup_complete and user_state.name:
            user_state.is_interview_active = True
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ë–æ—Ç –¥—É–º–∞–µ—Ç..."
            thinking_message = await message.answer("ü§î –ë–æ—Ç –¥—É–º–∞–µ—Ç...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI
            try:
                first_message = await openai_client.get_response(
                    user_state.prompt,
                    f"–ù–∞—á–∞–ª–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è —Å {user_state.name}",
                    [],
                    user_state.interview_mode,
                    user_state.language,
                    user_state.name,
                    user_state.interview_type
                )
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ë–æ—Ç –¥—É–º–∞–µ—Ç..."
                await thinking_message.delete()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é (–¥–ª—è DOCX)
                user_state.add_message(first_message, is_bot=True)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                filtered_first_message = user_state.filter_technical_info(first_message)
                await message.answer(filtered_first_message)
                
            except Exception as e:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ë–æ—Ç –¥—É–º–∞–µ—Ç..." –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                await thinking_message.delete()
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.")
            return
        else:
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è, –≤—ã–±—Ä–∞–≤ —Ä–µ–∂–∏–º, —è–∑—ã–∫ –∏ —Ç–∏–ø —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.")
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
    if user_text in ["—Å—Ç–æ–ø", "stop", "–∑–∞–≤–µ—Ä—à–∏—Ç—å", "–∫–æ–Ω–µ—Ü", "–∑–∞–∫–æ–Ω—á–∏—Ç—å"]:
        await message.answer("–ó–∞–≤–µ—Ä—à–∞—é —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
        await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç...")
        
        try:
            analytics_report = await openai_client.generate_analytics_report(
                user_state.get_conversation_history()
            )
            
            # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            doc_generator.generate_report(
                user_id, 
                user_state.get_conversation_history(), 
                analytics_report
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            doc_path = doc_generator.save_document(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(doc_path, 'rb') as doc_file:
                await message.answer_document(
                    types.BufferedInputFile(
                        doc_file.read(),
                        filename=f"interview_report_{user_id}.docx"
                    ),
                    caption="–í–∞—à –æ—Ç—á–µ—Ç –ø–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –≥–æ—Ç–æ–≤!"
                )
            
            # –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
            user_state.is_interview_active = False
            user_state.is_setup_complete = False
            user_state.interview_mode = None
            user_state.language = None
            user_state.interview_type = None
            user_state.name = None
            user_state.conversation_history = []
            user_state.prompt = None
            
            await message.answer("–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
            await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ /start")
            return
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.")
            return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç)
    user_state.add_message(message.text, is_bot=False)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ë–æ—Ç –¥—É–º–∞–µ—Ç..."
    thinking_message = await message.answer("ü§î –ë–æ—Ç –¥—É–º–∞–µ—Ç...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        bot_response = await openai_client.get_response(
            user_state.prompt,
            message.text,
            user_state.get_conversation_history()[:-1],  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_state.interview_mode,
            user_state.language,
            user_state.name,
            user_state.interview_type
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ë–æ—Ç –¥—É–º–∞–µ—Ç..."
        await thinking_message.delete()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é (–¥–ª—è DOCX)
        user_state.add_message(bot_response, is_bot=True)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        filtered_response = user_state.filter_technical_info(bot_response)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(filtered_response)
        
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ë–æ—Ç –¥—É–º–∞–µ—Ç..." –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await thinking_message.delete()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await set_commands()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

